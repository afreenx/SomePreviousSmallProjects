//  Name: Afreen Fatima UIN: 230009299

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    //create the D register
    DRegister(in=ALUoutput, load=loadD, out=outD);
    Mux16(a=ALUoutput, b=instruction, sel=instA, out=firstMux16out); //this MUX16 has inputs from Dreg & instruction

    //next is A reg
    ARegister(in=firstMux16out, load=loadA, out=outA, out[0..14]=addressM); //C is the loadA
    
    //route goes to PC & MUX16
   
    Mux16(a=outA, b=inM, sel=secondMuxSel, out=secondMux16out); //goes into ALU
    

    //For the ALU instructions check bits 
    //two outputs connected to alu 
    ALU(x=outD, y=secondMux16out, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], 
    f=instruction[7], no=instruction[6], out=ALUoutput, out = outM, zr=zr, ng=ng); 

    //Jump commands 
    And(a=instruction[0], b=jCom, out=JGT); //JGT 
    And(a=instruction[1], b=zr, out=JEQ);  //JEQ
    And(a=instruction[2], b=ng, out=JLT);  //JLT

    //is it a C instruction
    Not(in=instruction[15], out=instA); //negate 0 or 1
    Not(in=instA, out = Cinstruction);

    And(a=instruction[15], b=instruction[4], out=loadD);
    And(a=Cinstruction, b=instruction[5], out=dA); //in the C instruction the 5th instruction is the DA
    Or(a=instA, b=dA, out=loadA);

    
    Or(a=zr, b=ng, out=ZRorNG);
    Not(in=ZRorNG, out=jCom);

    //null 000 jgt 001 jeq 010 jge 011 jlt 100 jne 0 jle 110 jmp 111 
    Or(a = JGT, b = JLE, out = JMP); //JMP
    Or(a = JGT, b = JEQ, out = JGE); //JGE
    Or(a = JEQ, b = JLT, out = JLE); //JLE
    Or(a = JGT, b = JLT, out = JNE); //JNE
    Or(a= JGT, b = JEQ, out= jgtANDjeq); //001 or 010 
    Or(a= JMP, b = jgtANDjeq, out= finaljump);

    And(a=Cinstruction, b=finaljump, out=loadPC);
    And(a=Cinstruction, b=instruction[12], out=secondMuxSel);
    And(a=Cinstruction, b=instruction[3], out=loadM, out=writeM);
    PC(in=outA, load=loadPC, inc=true, reset=reset, out[0..14] =pc);
    
}