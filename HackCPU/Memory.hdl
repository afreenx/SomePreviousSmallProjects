// Name: Afreen Fatima UIN: 230009299

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:

    //RAM 16K : in 16 bits 
    //address signal of 14 bits 
    //out 16 bits  
    // in & address connected to screen

    RAM16K(in=in, load=rload, address=address[0..13], out=Rout);

    //Screen : 16 bit in 
    // 13 bits address 
    // out 16 bits  
    Screen(in=in, load=sload, address=address[0..12], out=Sout);
     //load - load will go in a & b go to RAM16K and then one goes to screen 
    DMux4Way(in=load, sel=address[13..14], a=RloadDmux, b=RloadDmux1, c= sload);
    Or(a=RloadDmux, b=RloadDmux1, out=rload); //for DMUX going into ram
    Keyboard(out=Kout);
   
    //load and ram, screen, keyboard outs 
    Mux4Way16(a= Rout, b=Rout, c=Sout, d=Kout, sel=address[13..14], out=out);

}